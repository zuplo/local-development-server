var Y=Object.defineProperty;var s=(t,e)=>Y(t,"name",{value:e,configurable:!0});import{bundle as ie,transpile as ae}from"https://deno.land/x/emit@0.24.1/mod.ts";import{load as N}from"https://deno.land/std@0.195.0/dotenv/mod.ts";import{createOAuth2Token as ce}from"https://deno.land/x/deno_gcp_admin@0.0.5/auth.ts";import{parse as A}from"https://deno.land/std@0.195.0/flags/mod.ts";import{Server as v}from"https://deno.land/std@0.195.0/http/server.ts";import*as E from"https://deno.land/std@0.195.0/fs/mod.ts";import*as u from"https://deno.land/std@0.195.0/http/http_status.ts";import*as n from"https://deno.land/std@0.195.0/log/mod.ts";import*as i from"https://deno.land/std@0.195.0/path/mod.ts";import{assert as de,assertAlmostEquals as fe,assertArrayIncludes as Oe,assertEquals as Se,assertExists as ge,assertFalse as Le,assertInstanceOf as Pe,assertIsError as me,assertMatch as he,assertNotEquals as Te,assertNotMatch as Re,assertNotStrictEquals as Ue,assertObjectMatch as De,assertRejects as ke,assertStrictEquals as ye,assertStringIncludes as we,assertThrows as Ie,equal as xe,fail as Ne,unimplemented as Ae,unreachable as ve}from"https://deno.land/std@0.195.0/testing/asserts.ts";import{afterAll as Ce,afterEach as We,beforeAll as Fe,beforeEach as Be,describe as Ge,it as Ve}from"https://deno.land/std@0.195.0/testing/bdd.ts";var T="dist",M="worker.js",R="zup.js",C="env-vars.js",W="worker-invalid-build.js";var U=class{static{s(this,"Settings")}get PROD_SERVER_PORT(){return Deno.env.get("PORT")?parseInt(Deno.env.get("PORT")):3e3}get IS_TEST(){return!!Deno.env.get("DENO_TEST")}get IS_VERBOSE_DEBUG(){return!!Deno.env.get("DENO_VERBOSE_DEBUG")}},q=new U,O=q;async function D(t){let e=Object.fromEntries(t.headers.entries()),r=await t.arrayBuffer(),o=t.url;return e["zuplo-forwarded-host"]&&(o=t.url.replace(e.host,e["zuplo-forwarded-host"])),{url:o,body:r,cache:t.cache,credentials:t.credentials,headers:e,integrity:t.integrity,keepalive:t.keepalive,method:t.method,mode:t.mode,redirect:t.redirect,referrer:t.referrer,referrerPolicy:t.referrerPolicy,window:null}}s(D,"serialize");function k(t){let e={headers:t.headers,status:t.status,statusText:t.statusText};return t.status==101||t.status==204||t.status==205||t.status==304?new Response(null,e):new Response(t.body,e)}s(k,"deserialize");var F="worker.js";var y=class{static{s(this,"Settings")}get ZUPLO_GCP_BUNDLE_BUCKET_NAME(){return Deno.env.get("ZUPLO_GCP_BUNDLE_BUCKET_NAME")}get ZUPLO_GCP_BUNDLE_BUCKET_PATH(){return i.join(this.DEPLOYMENT_NAME??"",this.ZUPLO_DEPLOYMENT_SECRET??"",F)}get ZUPLO_ACCOUNT_NAME(){return Deno.env.get("ZUPLO_ACCOUNT_NAME")}get ZUPLO_PROJECT_NAME(){return Deno.env.get("ZUPLO_PROJECT_NAME")}get DEPLOYMENT_NAME(){return Deno.env.get("DEPLOYMENT_NAME")}get ZUPLO_GCP_CLOUD_STORAGE_KEY(){return Deno.env.get("ZUPLO_GCP_CLOUD_STORAGE_KEY")}get ZUPLO_DEPLOYMENT_SECRET(){return Deno.env.get("ZUPLO_DEPLOYMENT_SECRET")}get PROD_SERVER_PORT(){return Deno.env.get("PORT")?parseInt(Deno.env.get("PORT")):3e3}get SHOULD_LOAD_ENV_VARS(){return!!(d.ZUPLO_ACCOUNT_NAME&&d.ZUPLO_PROJECT_NAME&&d.MANAGEMENT_API_URL&&d.ZUPLO_AUTH_API_JWT)}get IS_TEST(){return!!Deno.env.get("DENO_TEST")}get ZUPLO_AUTH_API_JWT(){return Deno.env.get("__ZUPLO_AUTH_API_JWT")}get MANAGEMENT_API_URL(){return Deno.env.get("MANAGEMENT_API_URL")}get IS_VERBOSE_DEBUG(){return!!Deno.env.get("DENO_VERBOSE_DEBUG")}},d=new y,B=d;async function w(t,e){return await Deno.writeTextFile(t,e,{create:!0}),t}s(w,"createEnvVarsFile");function I(t,e,r,o,a){let _=`import "${t}?version=${Date.now()}";`,l=r?`import "${r}";`:"",c=`import "${o}?version=${Date.now()}";`,h=a?`import "${a}";`:"";return[_,[...e],l,c,h].join(Deno.build.os==="windows"?E.EOL.CRLF:E.EOL.LF)}s(I,"createExternallyLinkedZuploScript");function x(t){let e=H(t.isLocal),r=X(t.env);return[e,r].join(Deno.build.os==="windows"?E.EOL.CRLF:E.EOL.LF)}s(x,"createVarsContent");var G=["__ZUPLO_DEPLOYMENT_NAME","__ZUPLO_LOGGING_ID","__ZUPLO_LOG_LEVEL","__ZUPLO_LOG_FORMAT","__ZUPLO_METRICS_API_URL","__ZUPLO_REMOTE_LOG_URL","__ZUPLO_REMOTE_LOG_TOKEN","__ZUPLO_ASSETS_CDN_URL","__ZUPLO_AUTH_API_JWT","__ZUPLO_EXTERNAL_SERVICES","MANAGEMENT_API_URL"],K=G.filter(t=>!["__ZUPLO_REMOTE_LOG_URL","__ZUPLO_METRICS_API_URL"].includes(t)),J=["__ZUPLO_LOG_LEVEL","__ZUPLO_LOG_FORMAT","SYSTEM_LOG_LEVEL","PROJECT_ID","RUNTIME_ENV","LOGGING_ID","__ZUPLO_LOGGING_ID","GIT_SHA","MANAGEMENT_API_URL","__ZUPLO_MOCK_API_KEYS","__ZUPLO_AUTH_API_JWT"];function H(t){let e=Deno.env.toObject(),r=`//#region System Variables

`;if(t)for(let o of J)r+=`self['${o}'] = ${p(e[o])};
`;else if(B.IS_TEST)for(let o of K)o==="__ZUPLO_DEPLOYMENT_NAME"?r+=`self['${o}'] = ${p(e.DEPLOYMENT_NAME)};
`:r+=`self['${o}'] = \`${p(e[o])}\`;
`;else for(let o of G)o==="__ZUPLO_DEPLOYMENT_NAME"?r+=`self['${o}'] = ${p(e.DEPLOYMENT_NAME)};
`:r+=`self['${o}'] = ${p(e[o])};
`;return r+=`//#endregion

`,r}s(H,"_injectSystemVars");function X(t){let e=`//#region Environment Variables

`;for(let[r,o]of t)e+=`self['${r}'] = ${p(o)};
`;return e+=`//#endregion

`,e}s(X,"_injectVars");function p(t){return JSON.stringify(t)}s(p,"_encodeAndEscapeAsNecessary");var S="OkMessage",g="ErrorMessage",L="WebSocketMessage";var P=class{static{s(this,"WebSocketHandler")}socket;clientSocket;constructor(e){e.onopen=r=>{n.info("socket onopen")},e.onmessage=r=>{n.info("socket onmessage"),this.getClientSocket().send(r.data)},e.onerror=r=>{n.info(`socket onerror: ${JSON.stringify(r)}`)},e.onclose=r=>{n.info("socket onclose"),this.getClientSocket().close()},this.socket=e}async setClientSocket(e){if(this.clientSocket)throw new Error("clientSocket is already set");e.onmessage=o=>{this.socket.send(o.data)},e.onclose=o=>{this.socket.close()};let r=0;for(;r<=3;)n.info(`Verifying if clientSocket is ready, state: ${e.readyState} `),e.readyState===WebSocket.OPEN?r=4:(r++,await new Promise(o=>setTimeout(o,r*500)));if(e.readyState!==WebSocket.OPEN)throw new Error("clientSocket connection cannot be established");this.clientSocket=e}getClientSocket(){if(!this.clientSocket)throw new Error("clientSocket is not available");return this.clientSocket}};var m=class{static{s(this,"LocalWorkerExecutor")}options;workerFilePath;workerContext;currentWorker;currentEnvVarsFilePath;pendingRequests=new Map;constructor(e){this.options=e,this.workerFilePath=i.toFileUrl(`${this.deriveModuleBasedir()}/${R}`),this.workerContext={env:new Map,isLocal:!0}}initializeWorker(){this.currentWorker&&this.currentWorker.terminate(),delete this.currentWorker,this.currentWorker=new Worker(this.workerFilePath,{type:"module",deno:{permissions:{env:!1,ffi:!1,hrtime:!1,net:!0,read:!1,run:!1,write:!1}}}),this.currentWorker.postMessage({context:this.workerContext}),this.currentWorker.onmessage=e=>{try{if(e.data._type===S||e.data._type===g||e.data._type===L){let r=e.data._requestId;if(r){let o=this.pendingRequests.get(r);o&&o(e)}}else n.error(e)}catch(r){n.error("Unexpected error while responding to postMessage from worker",r)}}}preparePromise(e,r){return new Promise((a,_)=>{this.pendingRequests.set(e,async l=>{try{if(l.data._type===S){let c=k(l.data.response);a(c)}else if(l.data._type===g)_(l.data.error);else if(l.data._type===L&&r){let c=new WebSocket(l.data.websocket.url),{socket:h,response:$}=Deno.upgradeWebSocket(r);await new P(h).setClientSocket(c),a($)}else n.error(l),_(l)}catch(c){n.error("Unexpected error while responding to postMessage from worker",c),_(c)}})})}deriveModuleBasedir(){return i.dirname(this.options.workerModulePath)}async writeWorkerScript(e){let r=import.meta.resolve("./worker-prologue.ts"),o=import.meta.resolve("./worker-epilogue.ts");this.currentEnvVarsFilePath=await w(`${this.deriveModuleBasedir()}/${C}`,x(e));let a=I(i.toFileUrl(this.currentEnvVarsFilePath).toString(),this.linkPolyfills(e),r,i.toFileUrl(this.options.workerModulePath).toString(),o);O.IS_VERBOSE_DEBUG&&n.info(a);let _=`${this.deriveModuleBasedir()}/${R}`;return await Deno.writeTextFile(_,a),new URL(`?version=${Date.now()}`,i.toFileUrl(_))}linkPolyfills(e){return[`import { URLPattern } from "${import.meta.resolve("../common-impl/polyfills/urlpattern-polyfill-6.0.2.js")}";`]}async init(){n.info("Initializing local-executor"),await this.initializeWorkerContents(),this.workerContext.env=await this.initializeVars(),this.workerFilePath=await this.writeWorkerScript(this.workerContext),this.initializeWorker()}initializeVars(){return Promise.resolve(new Map(Object.entries(Deno.env.toObject())))}async initializeWorkerContents(){}async reloadScript(e){n.info("Reloading the contents of the zup locally");try{return await this.initializeWorkerContents(),this.workerContext.env=await this.initializeVars(),this.workerFilePath=await this.writeWorkerScript(this.workerContext),await this.initializeWorker(),new Response(null,{status:u.Status.NoContent})}catch(r){return n.error("Unexpected error while responding to __/zuplo/reload",r),new Response(null,{status:u.Status.InternalServerError})}}invalidateScript(e){throw new Error("Not implemented for local executor")}async execute(e){try{if(!this.currentWorker)return new Response(null,{status:u.Status.ServiceUnavailable});let r=crypto.randomUUID();return this.currentWorker.postMessage({_requestId:r,request:await D(e)}),this.preparePromise(r,e)}catch(r){return n.error("Unexpected error while trying to execute the current request in local-executor worker.",r),new Response(null,{status:u.Status.InternalServerError})}}};var f,V;async function z(t){let e;t?.sourceDirectory?(e=t.sourceDirectory,n.info(`Using passed in sourceDirectory of: ${e}`)):e=i.resolve(Deno.cwd());let r=i.join(e,T,M),o=i.join(e,T,W);f=new m({sourceDirectory:e,workerModulePath:r,invalidWorkerModulePath:o});let a=O.PROD_SERVER_PORT;t?.port&&(a=parseInt(t.port),n.info(`Using passed in port of: ${t.port}`)),V=new v({port:a,handler:j}),await V.listenAndServe()}s(z,"start");async function b(){await f.init()}s(b,"postStart");function j(t){return t.url&&t.url.endsWith("__/zuplo/reload")?f.reloadScript(t):t.url&&t.url.endsWith("__/zuplo/invalid-build")?f.invalidateScript(t):f.execute(t)}s(j,"handler");await N({export:!0,allowEmptyValues:!0,examplePath:""});await n.setup({handlers:{console:new n.handlers.ConsoleHandler("DEBUG")},loggers:{default:{level:"DEBUG",handlers:["console"]}}});var Z=A(Deno.args),ee=z({sourceDirectory:Z.sourceDirectory,port:Z.port}),te=b();await Promise.all([ee,te]);
